/* eslint-disable @typescript-eslint/no-explicit-any */
import type { NextPage } from 'next'
import Head from 'next/head'
import useSWR from 'swr'
import { Fragment, useEffect, useState } from 'react'
import { Popover, Transition } from '@headlessui/react'
import InfiniteScroll from 'react-infinite-scroll-component'
import Navbar from '~/components/features/navbars/Navbar'
import TokenCard from '~/components/features/TokenCard'
import TokenCardSkeleton from '~/components/features/TokenCardSkeleton'
import ALink from '~/components/features/ALink'

const Explore: NextPage = () => {
    const [statusFilterEnabled, setStatusFilterEnabled] = useState(false)
    const [lowest, setLowest] = useState(0)
    const [highest, setHighest] = useState(0)
    const [sort, setSort] = useState('Select Sort')
    const [data, setData] = useState<any>([])
    const [isLoading, setLoading] = useState(true)
    const [hasMore, setHasMore] = useState(true)
    const [url, setUrl] = useState('')
    const [page, setPage] = useState(0)
    const perPage = 14
    
    const fetcher = (servicUrl: RequestInfo) =>
        fetch(servicUrl)
            .then((res) => res.json())
            .then((res) => {
                if (res.tokens && res.tokens.length > 0) {
                    if (page == 0) {
                        setData(res.tokens)
                    } else {
                        setData([...data, ...res.tokens])
                    }

                    setHasMore(res.hasMore)
                }

                setLoading(false)
            })

    useSWR(isLoading ? url : null, fetcher)

    useEffect(() => {
        const params = new URLSearchParams({
            sort: sort,
            lowest: lowest.toString(),
            highest: highest.toString(),
            statusFilterEnabled: statusFilterEnabled.toString(),
            perPage: perPage.toString(),
            page: page.toString(),
        })

        setUrl(
            process.env.NEXT_PUBLIC_SERVER_URL +
                'api/explore?' +
                params.toString()
        )

        setLoading(true)
    }, [sort, lowest, highest, statusFilterEnabled, page])

    const lowestPriceHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
        const val = e.target?.value
        setLowest(parseFloat(val))
        setPage(0)
    }

    const heighestPriceHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
        const val = e.target?.value
        setHighest(parseFloat(val))
        setPage(0)
    }

    const statusFilterEnabledHandler = (status: boolean) => {
        setStatusFilterEnabled(status)
        setPage(0)
    }

    const scrollHandler = () => {
        if (hasMore) {
            setPage(page + 1)
        }
    }

    const sortHandler = (text: string) => {
        setPage(0)
        const popOver = document.querySelector(
            '.sort-popover > button'
        ) as HTMLElement
        popOver?.click()
        setSort(text)
    }
    return (
        <div>
            <Head>
                <title>Jaypigs marketplace</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="my-8 min-h-screen px-4 md:flex">
                <Navbar
                    statusFilterEnabled={statusFilterEnabled}
                    lowest={lowest}
                    highest={highest}
                    setStatusFilterEnabled={statusFilterEnabledHandler}
                    lowestPriceHandler={lowestPriceHandler}
                    highestPriceHandler={heighestPriceHandler}
                />
                <div className="flex-1">
                    <div className="mb-4 flex items-center justify-between rounded-lg border border-solid border-dark-100 py-4 px-4 dark:border-dark-400">
                        <Popover className="sort-popover relative">
                            {({ open }) => (
                                <>
                                    <Popover.Button
                                        className={`
                ${open ? '' : 'text-opacity-90'}
                 round-sm flex w-56 justify-between border border-solid border-dark-100 py-2 px-4 dark:border-dark-400 dark:bg-dark-300`}
                                    >
                                        <span>{sort}</span>
                                        <svg
                                            viewBox="0 0 32 32"
                                            focusable="false"
                                            className="h-6 w-6"
                                        >
                                            <path
                                                fillRule="evenodd"
                                                clipRule="evenodd"
                                                d="M16 10L26 20L24.6 21.4L16 12.8L7.4 21.4L6 20L16 10Z"
                                                fill="currentColor"
                                            ></path>
                                        </svg>
                                    </Popover.Button>
                                    <Transition
                                        as={Fragment}
                                        enter="transition ease-out duration-200"
                                        enterFrom="opacity-0 translate-y-1"
                                        enterTo="opacity-100 translate-y-0"
                                        leave="transition ease-in duration-150"
                                        leaveFrom="opacity-100 translate-y-0"
                                        leaveTo="opacity-0 translate-y-1"
                                    >
                                        <Popover.Panel className="absolute left-1/2 z-10 mt-3 w-56 -translate-x-1/2 transform px-4 sm:px-0">
                                            <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-black ring-opacity-5">
                                                <div className="relative bg-white p-2">
                                                    <button
                                                        className="w-full rounded-lg p-2 text-left text-dark-400 transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50"
                                                        onClick={() =>
                                                            sortHandler(
                                                                'Price Ascending'
                                                            )
                                                        }
                                                    >
                                                        Price Ascending
                                                    </button>
                                                    <hr className="border-t border-dark-100 dark:border-dark-300" />
                                                    <button
                                                        className="w-full rounded-lg p-2 text-left text-dark-400 transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50"
                                                        onClick={() =>
                                                            sortHandler(
                                                                'Price Descending'
                                                            )
                                                        }
                                                    >
                                                        Price Decending
                                                    </button>
                                                    <hr className="border-t border-dark-100 dark:border-dark-300" />
                                                    <button
                                                        className="w-full rounded-lg p-2 text-left text-dark-400 transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50"
                                                        onClick={() =>
                                                            sortHandler(
                                                                'Recent Activity'
                                                            )
                                                        }
                                                    >
                                                        Recent Activity
                                                    </button>
                                                </div>
                                            </div>
                                        </Popover.Panel>
                                    </Transition>
                                </>
                            )}
                        </Popover>
                        <ALink
                            href="/explore/activity"
                            className="rounded-full border-0 bg-dark-500 bg-opacity-50 px-4 py-2 font-medium text-white hover:bg-dark-500 dark:bg-white dark:text-black"
                        >
                            Activity
                        </ALink>
                    </div>
                    <div>
                        <InfiniteScroll
                            dataLength={data.length}
                            next={scrollHandler}
                            className="grid grid-cols-2 gap-4 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-7"
                            hasMore={hasMore}
                            loader={<TokenCardSkeleton total={14} />}
                        >
                            {data.map((token: any, index: number) => (
                                <TokenCard token={token} key={index} />
                            ))}
                        </InfiniteScroll>
                    </div>
                </div>
            </main>
        </div>
    )
}

export default Explore
